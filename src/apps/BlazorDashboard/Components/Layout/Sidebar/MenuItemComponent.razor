<li class="menu-li @(MenuItem!.HasChildMenuItems ? "has-menu" : "")">

    <a @onclick="ToggleSubMenu" class="menu-a">

        <i class="fa-solid fa-file-invoice"></i>
        <div class="menu-name-div">
            <span>@MenuItem.Title</span>
            @if (MenuItem.HasChildMenuItems)
            {
                <i class="fa-solid fa-angle-down toggle-icon @(MenuItem.IsOpened ? "rotate" : "")"></i>
            }
        </div>
    </a>

    @if (MenuItem.HasChildMenuItems)
    {
        <ul class="sub-menu @(MenuItem.IsOpened ? "show" : "")">
            @foreach (var childMenuItem in MenuItem.ChildMenuItems!)
            {
                <MenuItemComponent 
                    MenuItem="childMenuItem" 
                    MenuItemClickCallback="child => OnChildClick(MenuItem!, child)" />
            }
        </ul>
    }

</li>



@code {
    [Parameter]
    public MenuItem? MenuItem { get; set; }

    [Parameter]
    public EventCallback<MenuItem> MenuItemClickCallback { get; set; }

    private async Task ToggleSubMenu()
    {
        await MenuItemClickCallback.InvokeAsync(MenuItem);
    }

    private Task OnChildClick(MenuItem parent, MenuItem child)
    {
        // Ensure parent stays open when child clicked
        parent.IsOpened = true;
        return MenuItemClickCallback.InvokeAsync(child);
    }

}
