@layout AuthLayout
@page "/account/login"
@using Webport.ERP.Common.Domain.DataTransferObjects.System
@attribute [AllowAnonymous]

<div class="login-wrapper">
    <header class="header-layout">
        <img src="images/logo.jpg"
             alt="Company Logo" 
             style="width:50px"/>
    </header>
    <div class="body-layout">
        <!-- Left side -->
        <div class="left-panel">
            <h1>Welcome Back!</h1>
            <p>Access your account and continue where you left off.</p>
            <p>Manage your ERP, track your business, and more.</p>

            <div class="support">
                <p>
                    Need help?
                    <a href="mailto:support@yourbusiness.com">Contact Support</a>
                </p>
                <p>📞 +27 123 456 789</p>
            </div>
        </div>

        <!-- Right side -->
        <div class="right-panel">
            <div class="login-box">
                <div class="login-header">
                    <header>Welcome Sir</header>
                    <p>We are happy to have you back!</p>
                </div>
                <EditForm Model="@model" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="input-box">
                        <InputText id="email"
                                   @bind-Value="model.Email"
                                   class="input-field"
                                   autocomplete="off"
                                   required />
                        <label for="email">Email or phone</label>
                        <ValidationMessage For="@(() => model.Email)" />
                    </div>

                    <div class="input-box">
                        <InputText id="password"                            
                                   @bind-Value="model.Password"
                                   type="password"
                                   class="input-field"
                                   autocomplete="off"
                                   required />
                        <label for="password">Password</label>
                        <ValidationMessage For="@(() => model.Password)" />
                    </div>
                    <div class="forgot">
                        <section>
                            <a href="#" class="forgot-link">Forgot password?</a>
                        </section>
                    </div>
                    <div class="input-box">                        
                        <button type="submit" class="input-submit">Sign In</button>
                    </div>
                    <div class="middle-text">
                        <hr />
                        <p class="or-text">Or</p>
                        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
                        {
                            <div style="color:red; margin-top: 15px;">
                                <strong>@ErrorMessage</strong>
                            </div>
                        }
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
    <footer class="footer-layout">
        <h3>All rights resserved</h3>
    </footer>
</div>



@code {
    [CascadingParameter]
    public Task<AuthenticationState>? AuthenticationState { get; set; }

    public string? ErrorMessage { get; set; }
    internal LoginDto model { get; set; } = new();
    private bool _navigated;

    protected override void OnInitialized()
    {
        #if DEBUG
            model.Email = "customer1@gmail.com";
            model.Password = "12345678";
        #endif
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_navigated)
        {
            await CheckUserAuthentication();
            _navigated = true;
        }
    }

    private async Task CheckUserAuthentication()
    {
        var user = (await AuthenticationState!).User;

        if (user?.Identity?.IsAuthenticated == true)
        {
            _NavigationManager.NavigateTo("/home");
        }
    }

    public async Task HandleLogin()
    {
        var response = await _ITokenService.AccessToken(model);

        if (response.IsSuccess)
        {
            _NavigationManager.NavigateTo("/account/postlogin?Token=" + response.Data.Token, forceLoad: true);
        }
        else
        {
            ErrorMessage = response.Error!.Description;
        }
    }

}
