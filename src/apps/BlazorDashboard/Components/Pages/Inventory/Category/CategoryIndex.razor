@page "/category/index"
@attribute [Authorize(Roles = "Customer")]

<MudText Typo="Typo.h5">Category List</MudText>

<MudDataGrid Items="@Categories"
             Filterable="true"
             ColumnResizeMode="ResizeMode.Column"
             Dense="true"
             Hover="true"
             Striped="true"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudIconButton Href="@($"category/modify")" Icon="@Icons.Material.Filled.Add" />
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium" />
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="_ => _.CategoryId" Title="Id" />
        <PropertyColumn Property="_ => _.CategoryCode" Title="Code" />
        <PropertyColumn Property="_ => _.CategoryDesc" Title="Description" />
        <TemplateColumn CellClass="">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Href="@($"category/modify/{context.Item.CategoryId}")" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" />
                    <MudIconButton OnClick="@(() => Delete(context.Item.CategoryId))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CategoryDto" />
    </PagerContent>
</MudDataGrid>

@code {
    private List<CategoryDto> Categories = new();
    private string _searchString = "";

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        var response = await _DataService.GetAllAsync<ListWrapper<CategoryDto>>("category");

        if (response.IsSuccess && response.Data.Records != null)
        {
            Categories = response.Data.Records.ToList();
        }
    }

    private async Task Delete(int id)
    {
        var parameters = new DialogParameters<Dialog>
        {
            { _ => _.ContentText, "Do you really want to delete this record? This process cannot be undone." },
            { _ => _.ButtonText, "Delete" },
            { _ => _.Color, Color.Error },
        };

        // Show the dialog and await user response
        var dialog = await DialogService.ShowAsync<Dialog>("Delete", parameters);
        var result = await dialog.Result;

        // Only proceed if user confirms deletion
        if (!result!.Canceled)
        {
            await _DataService.DeleteByIdAsync("category", id);
            await GetCategories();
        }

        await DialogService.ShowMessageBox("Success", "Deleted Successfully");
    }

    private Func<CategoryDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        return x.CategoryCode.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
            || x.CategoryDesc.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
            || $"{x.CategoryCode} {x.CategoryDesc}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };
}

