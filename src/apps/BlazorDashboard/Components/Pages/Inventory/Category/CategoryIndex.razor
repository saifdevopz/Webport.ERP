@page "/category/index"

@attribute [Authorize(Roles = "Customer")]

<MudText Typo="Typo.h6">Category Index</MudText>

<MudDataGrid Items="@Categories.Take(50)" Filterable="true" ColumnResizeMode="ResizeMode.Column" Dense="true" Hover="true" Striped="true" RowStyle="height: 5px;">
    <ToolBarContent>
        <MudIconButton Href="@($"category/modify")" Icon="@Icons.Material.Filled.Add" aria-label="delete" />
        <MudSpacer />
        <MudTextField Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="_ => _.CategoryId" Title="Id" />
        <PropertyColumn Property="_ => _.CategoryCode" Title="Code" />
        <PropertyColumn Property="_ => _.CategoryDesc" Title="Description" />
        <TemplateColumn CellClass="">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Href="@($"category/modify/{context.Item.CategoryId}")" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" />
                    <MudIconButton OnClick="@(() => Delete(context.Item.CategoryId))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CategoryDto" />
    </PagerContent>
</MudDataGrid>


@code {
    private List<CategoryDto> Categories = new();

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        var response = await _DataService.GetAllAsync<ListWrapper<CategoryDto>>("category");

        if (response.IsSuccess && response.Data.Records != null)
        {
            Categories = response.Data.Records.ToList();
        }
    }

    private async Task Delete(int id)
    {
        await _DataService.DeleteByIdAsync("role", id);
        await GetCategories();        
    }
}

