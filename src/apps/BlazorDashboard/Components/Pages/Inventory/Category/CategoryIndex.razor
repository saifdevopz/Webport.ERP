@page "/category/index"
@using BlazorDashboard.Components.Shared
@attribute [Authorize(Roles = "Customer")]

<MudText Typo="Typo.h5">Category List</MudText>

<MudDataGrid Items="@Categories"
             Filterable="true"
             ColumnResizeMode="ResizeMode.Column"
             Dense="true"
             Hover="true"
             Striped="true"
             QuickFilter="@_quickFilter">
    <ToolBarContent>
        <MudIconButton Href="@($"category/modify")" Icon="@Icons.Material.Filled.Add" />
        <MudSpacer />
        <MudTextField @bind-Value="_searchString"
                      Placeholder="Search"
                      Adornment="Adornment.Start"
                      Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search"
                      IconSize="Size.Medium"
                      Class="mt-0"></MudTextField>
    </ToolBarContent>
    <Columns>
        <PropertyColumn Property="_ => _.CategoryId" Title="Id" />
        <PropertyColumn Property="_ => _.CategoryCode" Title="Code" />
        <PropertyColumn Property="_ => _.CategoryDesc" Title="Description" />
        <TemplateColumn CellClass="">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Href="@($"category/modify/{context.Item.CategoryId}")" Icon="@Icons.Material.Filled.Edit" Color="Color.Success" />
                    <MudIconButton OnClick="@(() => Delete(context.Item.CategoryId))" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" />
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="CategoryDto" />
    </PagerContent>
</MudDataGrid>

<button class="cool-button" @onclick="ShowDialog">Open Dialog</button>

<Dialog Title="Hello World!" @bind-Opened="dialogShown" CloseButtonClicked="@(() => dialogShown = false)">
    <BodyContent>
        <p style="font-size: 13px;">
            Lorem ipsum dolor sit amet consectetur, adipisicing elit. Vero fugit vitae veritatis error perspiciatis ea eum nihil, illum ut asperiores amet quos quis eos odio laudantium ipsam ullam quidem aut cumque accusantium! Possimus at perferendis consequatur doloremque ad dolore fugiat, explicabo, veniam facere in sed accusantium ex doloribus minus obcaecati vitae tempore exercitationem dicta quia illo, sit culpa fuga. Porro quaerat quae eligendi eius voluptates! Nihil, obcaecati placeat. Dolore dicta odit odio quae libero quod cupiditate molestiae vero magnam. Fugiat mollitia nihil quae, odio possimus animi hic voluptas nesciunt minus quo unde tempora consectetur in eveniet maxime cupiditate eligendi nemo.
        </p>
    </BodyContent>

    <FooterContent>
        <button class="ok-button">Ok</button>
    </FooterContent>
</Dialog>

@if (DialogIsOpen)
{
    <Dialog2 Caption="Delete an author"
            Message="sss"
            OnClose="@OnDialogClose"
            Type="Dialog2.Category.Okay">
    </Dialog2>
}


@code {
    private List<CategoryDto> Categories = new();
    private string _searchString = "";

    private bool dialogShown = false;
    private bool DialogIsOpen = false;

    private void ShowDialog()
    {
        dialogShown = true;
        DialogIsOpen = true;
    }

    private void OnDialogClose(bool isOk)
    {
        DialogIsOpen = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetCategories();
    }

    private async Task GetCategories()
    {
        var response = await _DataService.GetAllAsync<ListWrapper<CategoryDto>>("category");

        if (response.IsSuccess && response.Data.Records != null)
        {
            Categories = response.Data.Records.ToList();
        }
    }

    private async Task Delete(int id)
    {
        await _DataService.DeleteByIdAsync("role", id);
        await GetCategories();        
    }

    private Func<CategoryDto, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString)) return true;

        return x.CategoryCode.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
            || x.CategoryDesc.Contains(_searchString, StringComparison.OrdinalIgnoreCase)
            || $"{x.CategoryCode} {x.CategoryDesc}".Contains(_searchString, StringComparison.OrdinalIgnoreCase);
    };
}

