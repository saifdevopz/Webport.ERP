@page "/category/modify"
@page "/category/modify/{Id}"

@attribute [Authorize(Roles = "Customer")]

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudCard Elevation="1">
        <MudCardHeader>
            <CardHeaderContent>
                @if(Id == null)
                {
                    <MudText Typo="Typo.h6">Add Category</MudText>
                }
                else
                {
                    <MudText Typo="Typo.h6">Update Category</MudText>
                }
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <MudTextField @bind-Value="model.CategoryCode" 
                          Variant="Variant.Outlined" 
                          For="@(() => model.CategoryCode)" 
                          Label="Code" 
                          ReadOnly="Id is not null" />

            <MudTextField @bind-Value="model.CategoryDesc" 
                          Variant="Variant.Outlined" 
                          For="@(() => model.CategoryDesc)" 
                          Label="Description" />
        </MudCardContent>

        <MudCardActions Style="display: flex; justify-content: end;">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary">Save</MudButton>
            <MudButton OnClick="Cancel" Variant="Variant.Outlined" Color="Color.Error">Cancel</MudButton>
        </MudCardActions>

        @if (!string.IsNullOrWhiteSpace(ErrorMessage))
        {
            <MudAlert Severity="Severity.Error" Elevation="0" Variant="Variant.Filled" Dense="true" Class="m-2">
                @ErrorMessage
            </MudAlert>
        }
    </MudCard>
</EditForm>

@code {
    [Parameter] public string? Id { get; set; }
    private CategoryDto model = new();
    private bool IsEditMode => !string.IsNullOrWhiteSpace(Id);
    private string ErrorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (IsEditMode)
        {
            try
            {
                model = await GetCategory();
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Failed to load category: {ex.Message}";
            }
        }
    }

    private async Task<CategoryDto> GetCategory()
    {
        var response = await _DataService.GetByIdAsync<Wrapper<CategoryDto>>("category", Id!);
        return response.Data!.Record;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        try
        {
            Result response = IsEditMode
                ? await _DataService.PutAsync("category", model)
                : await _DataService.PostAsync("category", model);

            if (response.IsSuccess)
            {
                _NavigationManager.NavigateTo("/category/index");
            }
            else
            {
                ErrorMessage = response.Error?.Description ?? "An unexpected error occurred.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Exception: {ex.Message}";
        }
    }

    private void Cancel() => _NavigationManager.NavigateTo("/category/index");
}
