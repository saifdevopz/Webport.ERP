@page "/test/virtualization"

@using MudBlazor
@using System.Security.Cryptography

@if (isLoading)
{
    <div style="height:100vh;" class="d-flex justify-center align-center">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    </div>
}
else
{
    <div class="d-flex justify-center align-center">
        <h3>Total Records: @_items.Count</h3>
    </div>

    <MudDataGrid Items="@_items" Virtualize="true" FixedHeader="true" Dense="true" Height="100vh">
        <Columns>
            <PropertyColumn Property="x => x.Id" Title="ID" />
            <PropertyColumn Property="x => x.Name" Title="Name" />
            <PropertyColumn Property="x => x.Email" Title="Email" />
            <PropertyColumn Property="x => x.Product" Title="Product" />
            <PropertyColumn Property="x => x.Price" Title="Price" Format="C2" />
        </Columns>
    </MudDataGrid>
}


@code {
    public record Model(int Id, string Name, string Email, string Product, decimal Price);

    private readonly List<Model> _items = new();
    private bool isLoading = true;

    private static readonly string[] FirstNames = { "John", "Sara", "David", "Emma", "Liam", "Sophia", "Ethan", "Olivia" };
    private static readonly string[] LastNames = { "Smith", "Johnson", "Brown", "Williams", "Jones", "Garcia" };
    private static readonly string[] Products = { "Laptop", "Phone", "Tablet", "Headphones", "Monitor", "Keyboard", "Mouse" };

    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
        {
            for (var i = 1; i <= 500_000; i++)
            {
                var first = FirstNames[SecureRandomInt(0, FirstNames.Length)];
                var last = LastNames[SecureRandomInt(0, LastNames.Length)];
                var name = $"{first} {last}";
                var email = $"{first.ToLower()}.{last.ToLower()}{i}@example.com";
                var product = Products[SecureRandomInt(0, Products.Length)];
                var price = Math.Round((decimal)SecureRandomDouble() * 2000m + 100m, 2);

                _items.Add(new Model(i, name, email, product, price));
            }
        });

        isLoading = false;
    }

    private static int SecureRandomInt(int minValue, int maxValue)
    {
        if (minValue >= maxValue)
            throw new ArgumentOutOfRangeException(nameof(minValue), "minValue must be less than maxValue");

        var diff = (long)maxValue - minValue;
        var uint32Buffer = new byte[4];

        using var rng = RandomNumberGenerator.Create();
        while (true)
        {
            rng.GetBytes(uint32Buffer);
            var rand = BitConverter.ToUInt32(uint32Buffer, 0);
            var max = (1 + (long)uint.MaxValue);
            var remainder = max % diff;
            if (rand < max - remainder)
                return (int)(minValue + (rand % diff));
        }
    }

    private static double SecureRandomDouble()
    {
        var uint32Buffer = new byte[4];
        using var rng = RandomNumberGenerator.Create();
        rng.GetBytes(uint32Buffer);
        var rand = BitConverter.ToUInt32(uint32Buffer, 0);
        return rand / (uint.MaxValue + 1.0);
    }
}
